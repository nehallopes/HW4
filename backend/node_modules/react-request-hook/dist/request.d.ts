import { AxiosRequestConfig, AxiosError, Canceler } from 'axios';
export declare type Arguments<T> = T extends (...args: infer A) => any ? A : never;
export interface Resource<TPayload> extends AxiosRequestConfig {
    payload?: TPayload;
}
export interface Request {
    (...args: any[]): Resource<any>;
}
export declare type Payload<TRequest extends Request> = ReturnType<TRequest>['payload'];
export interface RequestFactory<TRequest extends Request> {
    (...args: Arguments<TRequest>): {
        cancel: Canceler;
        ready: () => Promise<Payload<TRequest>>;
    };
}
export interface RequestDispatcher<TRequest extends Request> {
    (...args: Arguments<TRequest>): Canceler;
}
export interface RequestError {
    data: any;
    message: string;
    code?: string;
    isCancel: boolean;
}
export declare function request<TPayload>(config: AxiosRequestConfig, _payload?: TPayload): Resource<TPayload>;
export declare function createRequestError(error: AxiosError): RequestError;
